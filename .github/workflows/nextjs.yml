# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
#  # Runs on pushes targeting the default branch
#  push:
#    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      CYPRESS_DEVICE:
        description: 'Device the tests shall run on'
        required: true
        default:
          'DESKTOP'
      CYPRESS_RUN_NAME:
        description: 'The name of the run'
        required: true
        default: 'Regression' 

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false


jobs:
#  # Build job
#  build:
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Save variable and print
#        env:
#          RUN_NAME: ${{ inputs.RUN_NAME }}"
#          DEVICE: ${{ inputs.DEVICE }}"
#          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}"
#          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}"
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}"
#        run: |
#          echo "PRINTING VARIABLE NAME: $RUN_NAME"
#          echo "PRINTING VARIABLE DEVICE: $DEVICE"
#          echo "PRINTING VARIABLE DEVICE: $XRAY_CLIENT_ID"
#          echo "PRINTING VARIABLE DEVICE: $XRAY_CLIENT_SECRET"
#          echo "PRINTING VARIABLE DEVICE: $JIRA_API_TOKEN"
#
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Detect package manager
#        id: detect-package-manager
#        run: |
#          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
#            echo "manager=yarn" >> $GITHUB_OUTPUT
#            echo "command=install" >> $GITHUB_OUTPUT
#            echo "runner=yarn" >> $GITHUB_OUTPUT
#            exit 0
#          elif [ -f "${{ github.workspace }}/package.json" ]; then
#            echo "manager=npm" >> $GITHUB_OUTPUT
#            echo "command=ci" >> $GITHUB_OUTPUT
#            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#            exit 0
#          else
#            echo "Unable to determine package manager"
#            exit 1
#          fi
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: "16"
#          cache: ${{ steps.detect-package-manager.outputs.manager }}
#      - name: Setup Pages
#        uses: actions/configure-pages@v3
#        with:
#          # Automatically inject basePath in your Next.js configuration file and disable
#          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
#          #
#          # You may remove this line if you want to manage the configuration yourself.
#          static_site_generator: next
#      - name: Restore cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            .next/cache
#          # Generate a new cache whenever packages or source files change.
#          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
#          # If source files changed but packages didn't, rebuild from a prior cache.
#          restore-keys: |
#            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
#      - name: Install dependencies
#        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
#      - name: Build with Next.js
#        run: ${{ steps.detect-package-manager.outputs.runner }} next build
#      - name: Static HTML export with Next.js
#        run: ${{ steps.detect-package-manager.outputs.runner }} next export
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v2
#        with:
#          path: ./out
#      - name: Print contents of folder recursively
#        run: ls -R
#
#  # Deployment job
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
#
  cypress-run:
    runs-on: ubuntu-latest
    steps:
      # Run Cypress tests
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install modules
        run: npm install

#      - name: Save variable and print
#        env:
#           RUN_NAME: ${{ inputs.RUN_NAME }}"
#           DEVICE: ${{ inputs.DEVICE }}"
#           XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}"
#           XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}"
#           JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}"
#        run: |
#           echo "PRINTING VARIABLE NAME: $RUN_NAME"
#           echo "PRINTING VARIABLE DEVICE: $DEVICE"
#           echo "PRINTING VARIABLE DEVICE: $XRAY_CLIENT_ID"
#           echo "PRINTING VARIABLE DEVICE: $XRAY_CLIENT_SECRET"
#           echo "PRINTING VARIABLE DEVICE: $JIRA_API_TOKEN"

#      - name: Cypress run
#        uses: cypress-io/github-action@v5
#        env:
#          RUN_NAME: ${{ inputs.RUN_NAME }}"
#          DEVICE: ${{ inputs.DEVICE }}"
#          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}"
#          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}"
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}"

#      - name: Cypress run
#        env:
#          RUN_NAME: ${{ inputs.RUN_NAME }}"
#          DEVICE: ${{ inputs.DEVICE }}"
#          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}"
#          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}"
#          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}"
#        run: |
#          npx cypress run

      - name: Copy variables to global env
        run: |
          echo "RUN_NAME=${{ inputs.CYPRESS_RUN_NAME}}" >> $GITHUB_ENV
          echo "DEVICE=${{ inputs.CYPRESS_DEVICE}}" >> $GITHUB_ENV
          echo "XRAY_CLIENT_ID=${{ secrets.CYPRESS_XRAY_CLIENT_ID }}" >> $GITHUB_ENV
          echo "XRAY_CLIENT_SECRET=${{ secrets.CYPRESS_XRAY_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "JIRA_API_TOKEN=${{ secrets.CYPRESS_JIRA_API_TOKEN }}" >> $GITHUB_ENV

      - name: Print env
        run: env

      - name: Cypress run
        run:  npx cypress run
